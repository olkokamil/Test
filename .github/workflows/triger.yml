name: "Trigger Jenkins Job - with validation"
on:
  pull_request:
    types:
      - opened

jobs:
  run-updater:
    runs-on: windows-latest
    steps:
    - name: Validate test
      run: |
        $BRANCH_NAME = "${{ github.ref }}".Split("/")[-1]
        $url = "https://services.beta.wincan.com/jenkins/job/st/buildWithParameters?token=12345&BranchName=" + $BRANCH_NAME
        $JENKINS_QUEUE_ITEM=$(curl -X POST $url -u kolko:${{secrets.JENKINSACCESS}} -k)
        echo "JENKINS_QUEUE_ITEM=${JENKINS_QUEUE_ITEM}" >> $GITHUB_ENV


    - name: Wait for Jenkins Job to Complete
      run: |
        # Use a loop to periodically check the status of the Jenkins job
        # You will need to adjust this loop based on how you're checking the job status
        # The loop should continue until the job is complete
        # Use the stored queue item number or build URL to check the job status
        # Set an exit code based on the job's success or failure
        $JENKINS_JOB_STATUS="UNKNOWN"
        while ($JENKINS_JOB_STATUS -eq "UNKNOWN") {
         Start-Sleep -Seconds 10  # Adjust the sleep duration as needed
         $JENKINS_JOB_STATUS = Invoke-RestMethod -Uri "https://services.beta.wincan.com/jenkins/job/st/api/json?tree=builds[result]" -Credential kolko:${{secrets.JENKINSACCESS}} | Select-Object -ExpandProperty builds | Select-Object -First 1 | Select-Object -ExpandProperty result

          if ($null -eq $JENKINS_JOB_STATUS) {
            $JENKINS_JOB_STATUS = "UNKNOWN"
          }
        }
        # Check if the Jenkins job failed and exit with error if it did
        if ($JENKINS_JOB_STATUS -ne "SUCCESS") {
          Write-Host "Jenkins job failed"
          exit 1
        }

    - name: Job Succeeded
      if: success()
      run: Write-Host "Jenkins job completed successfully."      
