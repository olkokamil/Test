name: "Trigger Jenkins Job - validate"

on:
  push:
    branches: ['main']

jobs:
  run-updater:
    runs-on: windows-latest
    steps:
      - name: Trigger Jenkins Job
        run: |
          $BRANCH_NAME = "${{ github.ref }}".Split("/")[-1]
          $url = "https://services.beta.wincan.com/jenkins/job/test_commitpublis/buildWithParameters?token=12345&BranchName=" + $BRANCH_NAME
          $response = Invoke-RestMethod -Method Post -Uri $url -Authentication Basic -Credential (New-Object PSCredential('kolko', (ConvertTo-SecureString '${{secrets.JENKINSACCESS}}' -AsPlainText -Force))) -SkipCertificateCheck
          $queueUrl = $response.Headers.Location

          if (-not $queueUrl) {
            Write-Host "Queue URL not obtained from Jenkins."
            exit 1
          }
          Write-Host "Queue URL: $queueUrl"

      - name: Wait for Jenkins Job to Complete
        run: |
          $jobCompleted = $false
          $statusUrl = $queueUrl + "/api/json"

          Write-Host "Status URL: $statusUrl"

          while (-not $jobCompleted) {
            Start-Sleep -Seconds 60
            try {
              $status = Invoke-RestMethod -Uri $statusUrl -UseBasicParsing
              if ($status -and $status.executable -and $status.executable.number) {
                $jobCompleted = $true
                $buildNumber = $status.executable.number
                $buildUrl = "https://services.beta.wincan.com/jenkins/job/test_commitpublis/$buildNumber/api/json"
              }
            } catch {
              Write-Host "Error while checking job status: $_"
            }
          }

          $buildStatus = Invoke-RestMethod -Uri $buildUrl -UseBasicParsing
          if ($buildStatus.result -ne "SUCCESS") {
            Write-Host "Jenkins job failed with status: $($buildStatus.result)"
            exit 1
          }
          else {
            Write-Host "Jenkins job completed successfully."
